// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2025_1;
using System;
using System.Collections.Generic;

[LionCoreLanguage(Key = "key-mixedBaseContainmentLang", Version = "1")]
public partial class MixedBaseContainmentLangLanguage : LanguageBase<IMixedBaseContainmentLangFactory>
{
	public static readonly MixedBaseContainmentLangLanguage Instance = new Lazy<MixedBaseContainmentLangLanguage>(() => new("id-mixedBaseContainmentLang")).Value;
	public MixedBaseContainmentLangLanguage(string id) : base(id, LionWebVersions.v2025_1)
	{
		_baseContainmentIface = new(() => new InterfaceBase<MixedBaseContainmentLangLanguage>("id-baseContainmentIface", this) { Key = "key-baseContainmentIface", Name = "BaseContainmentIface", FeaturesLazy = new(() => [BaseContainmentIface_Cont]) });
		_baseContainmentIface_Cont = new(() => new ContainmentBase<MixedBaseContainmentLangLanguage>("id-baseContainemntIface-cont", BaseContainmentIface, this) { Key = "key-baseContainmentIface-cont", Name = "Cont", Optional = false, Multiple = false, Type = _builtIns.Node });
		_factory = new MixedBaseContainmentLangFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [BaseContainmentIface];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "key-mixedBaseContainmentLang";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "MixedBaseContainmentLang";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Interface> _baseContainmentIface;
	public Interface BaseContainmentIface => _baseContainmentIface.Value;

	private readonly Lazy<Containment> _baseContainmentIface_Cont;
	public Containment BaseContainmentIface_Cont => _baseContainmentIface_Cont.Value;
}

public partial interface IMixedBaseContainmentLangFactory : INodeFactory
{
}

public class MixedBaseContainmentLangFactory : AbstractBaseNodeFactory, IMixedBaseContainmentLangFactory
{
	private readonly MixedBaseContainmentLangLanguage _language;
	public MixedBaseContainmentLangFactory(MixedBaseContainmentLangLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}
}

[LionCoreMetaPointer(Language = typeof(MixedBaseContainmentLangLanguage), Key = "key-baseContainmentIface")]
public partial interface BaseContainmentIface : INode
{
	/// <remarks>Required Single Containment</remarks>
        [LionCoreMetaPointer(Language = typeof(MixedBaseContainmentLangLanguage), Key = "key-baseContainmentIface-cont")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = false, Multiple = false)]
	public INode Cont { get; set; }

	/// <remarks>Required Single Containment</remarks>
        public BaseContainmentIface SetCont(INode value);
}