// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedNestedSdtLang;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2025_1;
using System;
using System.Collections.Generic;

[LionCoreLanguage(Key = "key-mixedNestedSdtLang", Version = "1")]
public partial class MixedNestedSdtLangLanguage : LanguageBase<IMixedNestedSdtLangFactory>
{
	public static readonly MixedNestedSdtLangLanguage Instance = new Lazy<MixedNestedSdtLangLanguage>(() => new("id-mixedNestedSdtLang")).Value;
	public MixedNestedSdtLangLanguage(string id) : base(id, LionWebVersions.v2025_1)
	{
		_nestedSdt = new(() => new StructuredDataTypeBase<MixedNestedSdtLangLanguage>("id-nestedSdt", this) { Key = "key-nestedSdt", Name = "NestedSdt", FieldsLazy = new(() => [NestedSdt_nestedSdtField]) });
		_nestedSdt_nestedSdtField = new(() => new FieldBase<MixedNestedSdtLangLanguage>("id-nestedSdtField", NestedSdt, this) { Key = "key-nestedSdtField", Name = "nestedSdtField", Type = _builtIns.String });
		_factory = new MixedNestedSdtLangFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [NestedSdt];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "key-mixedNestedSdtLang";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "MixedNestedSdtLang";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<StructuredDataType> _nestedSdt;
	public StructuredDataType NestedSdt => _nestedSdt.Value;

	private readonly Lazy<Field> _nestedSdt_nestedSdtField;
	public Field NestedSdt_nestedSdtField => _nestedSdt_nestedSdtField.Value;
}

public partial interface IMixedNestedSdtLangFactory : INodeFactory
{
}

public class MixedNestedSdtLangFactory : AbstractBaseNodeFactory, IMixedNestedSdtLangFactory
{
	private readonly MixedNestedSdtLangLanguage _language;
	public MixedNestedSdtLangFactory(MixedNestedSdtLangLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		if (_language.NestedSdt.EqualsIdentity(structuredDataType))
			return new NestedSdt((string?)fieldValues.Get(_language.NestedSdt_nestedSdtField));
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}
}

[LionCoreMetaPointer(Language = typeof(MixedNestedSdtLangLanguage), Key = "key-nestedSdt")]
public readonly record struct NestedSdt : IStructuredDataTypeInstance
{
	private readonly string? _nestedSdtField;
	[LionCoreMetaPointer(Language = typeof(MixedNestedSdtLangLanguage), Key = "key-nestedSdtField")]
	public string NestedSdtField { get => _nestedSdtField ?? throw new UnsetFieldException(MixedNestedSdtLangLanguage.Instance.NestedSdt_nestedSdtField); init => _nestedSdtField = value; }

	public NestedSdt()
	{
		_nestedSdtField = null;
	}

	internal NestedSdt(string? nestedSdtField)
	{
		_nestedSdtField = nestedSdtField;
	}

	/// <inheritdoc/>
        public StructuredDataType GetStructuredDataType() => MixedNestedSdtLangLanguage.Instance.NestedSdt;
	/// <inheritdoc/>
        public IEnumerable<Field> CollectAllSetFields()
	{
		List<Field> result = [];
		if (_nestedSdtField != null)
			result.Add(MixedNestedSdtLangLanguage.Instance.NestedSdt_nestedSdtField);
		return result;
	}

	/// <inheritdoc/>
        public Object? Get(Field field)
	{
		if (MixedNestedSdtLangLanguage.Instance.NestedSdt_nestedSdtField.EqualsIdentity(field))
			return NestedSdtField;
		throw new UnsetFieldException(field);
	}

	public override string ToString() => $"NestedSdt {{ NestedSdtField = {_nestedSdtField} }}";
}