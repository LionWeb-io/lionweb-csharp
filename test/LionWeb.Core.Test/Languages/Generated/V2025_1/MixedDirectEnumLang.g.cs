// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2025_1;
using System;
using System.Collections.Generic;

[LionCoreLanguage(Key = "key-mixedDirectEnumLang", Version = "1")]
public partial class MixedDirectEnumLangLanguage : LanguageBase<IMixedDirectEnumLangFactory>
{
	public static readonly MixedDirectEnumLangLanguage Instance = new Lazy<MixedDirectEnumLangLanguage>(() => new("id-mixedDirectEnumLang")).Value;
	public MixedDirectEnumLangLanguage(string id) : base(id, LionWebVersions.v2025_1)
	{
		_directEnum = new(() => new EnumerationBase<MixedDirectEnumLangLanguage>("id-directEnum", this) { Key = "key-directEnum", Name = "DirectEnum", LiteralsLazy = new(() => [DirectEnum_directEnumA]) });
		_directEnum_directEnumA = new(() => new EnumerationLiteralBase<MixedDirectEnumLangLanguage>("id-directEnumA", DirectEnum, this) { Key = "key-directEnumA", Name = "directEnumA" });
		_factory = new MixedDirectEnumLangFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [DirectEnum];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "key-mixedDirectEnumLang";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "MixedDirectEnumLang";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Enumeration> _directEnum;
	public Enumeration DirectEnum => _directEnum.Value;

	private readonly Lazy<EnumerationLiteral> _directEnum_directEnumA;
	public EnumerationLiteral DirectEnum_directEnumA => _directEnum_directEnumA.Value;
}

public partial interface IMixedDirectEnumLangFactory : INodeFactory
{
}

public class MixedDirectEnumLangFactory : AbstractBaseNodeFactory, IMixedDirectEnumLangFactory
{
	private readonly MixedDirectEnumLangLanguage _language;
	public MixedDirectEnumLangFactory(MixedDirectEnumLangLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		if (_language.DirectEnum.EqualsIdentity(literal.GetEnumeration()))
			return EnumValueFor<DirectEnum>(literal);
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}
}

[LionCoreMetaPointer(Language = typeof(MixedDirectEnumLangLanguage), Key = "key-directEnum")]
public enum DirectEnum
{
	[LionCoreMetaPointer(Language = typeof(MixedDirectEnumLangLanguage), Key = "key-directEnumA")]
	directEnumA
}