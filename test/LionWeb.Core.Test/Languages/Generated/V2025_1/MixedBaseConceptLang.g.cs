// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseConceptLang;
using LionWeb.Core;
using LionWeb.Core.M1.Event;
using LionWeb.Core.M1.Event.Partition.Emitter;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2025_1;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

[LionCoreLanguage(Key = "key-mixedBaseConceptLang", Version = "1")]
public partial class MixedBaseConceptLangLanguage : LanguageBase<IMixedBaseConceptLangFactory>
{
	public static readonly MixedBaseConceptLangLanguage Instance = new Lazy<MixedBaseConceptLangLanguage>(() => new("id-mixedBaseConceptLang")).Value;
	public MixedBaseConceptLangLanguage(string id) : base(id, LionWebVersions.v2025_1)
	{
		_baseConcept = new(() => new ConceptBase<MixedBaseConceptLangLanguage>("id-baseConcept", this) { Key = "key-baseConcept", Name = "BaseConcept", Abstract = true, Partition = false, ImplementsLazy = new(() => [LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface]), FeaturesLazy = new(() => [BaseConcept_enumProp, BaseConcept_sdtProp]) });
		_baseConcept_enumProp = new(() => new PropertyBase<MixedBaseConceptLangLanguage>("id-enumProp", BaseConcept, this) { Key = "key-enumProp", Name = "enumProp", Optional = false, Type = LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.MixedDirectEnumLangLanguage.Instance.DirectEnum });
		_baseConcept_sdtProp = new(() => new PropertyBase<MixedBaseConceptLangLanguage>("id-sdtProp", BaseConcept, this) { Key = "key-sdtProp", Name = "sdtProp", Optional = false, Type = LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.MixedDirectSdtLangLanguage.Instance.DirectSdt });
		_factory = new MixedBaseConceptLangFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [BaseConcept];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.MixedDirectEnumLangLanguage.Instance, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.MixedDirectSdtLangLanguage.Instance];

	private const string _key = "key-mixedBaseConceptLang";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "MixedBaseConceptLang";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Concept> _baseConcept;
	public Concept BaseConcept => _baseConcept.Value;

	private readonly Lazy<Property> _baseConcept_enumProp;
	public Property BaseConcept_enumProp => _baseConcept_enumProp.Value;

	private readonly Lazy<Property> _baseConcept_sdtProp;
	public Property BaseConcept_sdtProp => _baseConcept_sdtProp.Value;
}

public partial interface IMixedBaseConceptLangFactory : INodeFactory
{
}

public class MixedBaseConceptLangFactory : AbstractBaseNodeFactory, IMixedBaseConceptLangFactory
{
	private readonly MixedBaseConceptLangLanguage _language;
	public MixedBaseConceptLangFactory(MixedBaseConceptLangLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}
}

[LionCoreMetaPointer(Language = typeof(MixedBaseConceptLangLanguage), Key = "key-baseConcept")]
public abstract partial class BaseConcept : ConceptInstanceBase, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.BaseContainmentIface, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.BasePropertyIface, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.BaseReferenceIface
{
	private LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.DirectEnum? _enumProp = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If EnumProp has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(MixedBaseConceptLangLanguage), Key = "key-enumProp")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.DirectEnum EnumProp { get => _enumProp ?? throw new UnsetFeatureException(MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp); set => SetEnumProp(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetEnumProp([NotNullWhenAttribute(true)] out LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.DirectEnum? enumProp)
	{
		enumProp = _enumProp;
		return _enumProp != null;
	}

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public BaseConcept SetEnumProp(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.DirectEnum value, INotificationId? eventId = null)
	{
		AssureNotNull(value, MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp);
		PropertyNotificationEmitter evt = new(MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp, this, value, _enumProp, eventId);
		evt.CollectOldData();
		_enumProp = value;
		evt.Notify();
		return this;
	}

	private LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.DirectSdt? _sdtProp = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If SdtProp has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(MixedBaseConceptLangLanguage), Key = "key-sdtProp")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.DirectSdt SdtProp { get => _sdtProp ?? throw new UnsetFeatureException(MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp); set => SetSdtProp(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetSdtProp([NotNullWhenAttribute(true)] out LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.DirectSdt? sdtProp)
	{
		sdtProp = _sdtProp;
		return _sdtProp != null;
	}

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public BaseConcept SetSdtProp(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.DirectSdt value, INotificationId? eventId = null)
	{
		AssureNotNull(value, MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp);
		PropertyNotificationEmitter evt = new(MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp, this, value, _sdtProp, eventId);
		evt.CollectOldData();
		_sdtProp = value;
		evt.Notify();
		return this;
	}

	private INode? _cont = null;
	/// <remarks>Required Single Containment</remarks>
    	/// <exception cref = "UnsetFeatureException">If Cont has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage), Key = "key-baseContainmentIface-cont")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = false, Multiple = false)]
	public INode Cont { get => _cont ?? throw new UnsetFeatureException(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont); set => SetCont(value); }

	/// <remarks>Required Single Containment</remarks>
        public bool TryGetCont([NotNullWhenAttribute(true)] out INode? cont)
	{
		cont = _cont;
		return _cont != null;
	}
/// <remarks>Required Single Containment</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.BaseContainmentIface LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.BaseContainmentIface.SetCont(INode value, INotificationId? eventId = null) => SetCont(value);
	/// <remarks>Required Single Containment</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public BaseConcept SetCont(INode value, INotificationId? eventId = null)
	{
		AssureNotNull(value, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont);
		ContainmentSingleNotificationEmitter<INode> evt = new(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont, this, value, _cont, eventId);
		evt.CollectOldData();
		SetParentNull(_cont);
		AttachChild(value);
		_cont = value;
		evt.Notify();
		return this;
	}

	private string? _prop = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Prop has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage), Key = "key-basePropertyIface-prop")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Prop { get => _prop ?? throw new UnsetFeatureException(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop); set => SetProp(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetProp([NotNullWhenAttribute(true)] out string? prop)
	{
		prop = _prop;
		return _prop != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.BasePropertyIface LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.BasePropertyIface.SetProp(string value, INotificationId? eventId = null) => SetProp(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public BaseConcept SetProp(string value, INotificationId? eventId = null)
	{
		AssureNotNull(value, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop);
		PropertyNotificationEmitter evt = new(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop, this, value, _prop, eventId);
		evt.CollectOldData();
		_prop = value;
		evt.Notify();
		return this;
	}

	private IReadableNode? _ref = null;
	/// <remarks>Required Single Reference</remarks>
    	/// <exception cref = "UnsetFeatureException">If Ref has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage), Key = "key-baseReferenceIface-ref")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = false, Multiple = false)]
	public IReadableNode Ref { get => _ref ?? throw new UnsetFeatureException(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref); set => SetRef(value); }

	/// <remarks>Required Single Reference</remarks>
        public bool TryGetRef([NotNullWhenAttribute(true)] out IReadableNode? @ref)
	{
		@ref = _ref;
		return _ref != null;
	}
/// <remarks>Required Single Reference</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.BaseReferenceIface LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.BaseReferenceIface.SetRef(IReadableNode value, INotificationId? eventId = null) => SetRef(value);
	/// <remarks>Required Single Reference</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public BaseConcept SetRef(IReadableNode value, INotificationId? eventId = null)
	{
		AssureNotNull(value, LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref);
		ReferenceSingleNotificationEmitter evt = new(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref, this, value, _ref, eventId);
		evt.CollectOldData();
		_ref = value;
		evt.Notify();
		return this;
	}

	public BaseConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => MixedBaseConceptLangLanguage.Instance.BaseConcept;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp.EqualsIdentity(feature))
		{
			result = EnumProp;
			return true;
		}

		if (MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp.EqualsIdentity(feature))
		{
			result = SdtProp;
			return true;
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont.EqualsIdentity(feature))
		{
			result = Cont;
			return true;
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop.EqualsIdentity(feature))
		{
			result = Prop;
			return true;
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref.EqualsIdentity(feature))
		{
			result = Ref;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? eventId = null)
	{
		if (base.SetInternal(feature, value, eventId))
			return true;
		if (MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp.EqualsIdentity(feature))
		{
			if (value is LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectEnumLang.DirectEnum v)
			{
				SetEnumProp(v, eventId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp.EqualsIdentity(feature))
		{
			if (value is LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedDirectSdtLang.DirectSdt v)
			{
				SetSdtProp(v, eventId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont.EqualsIdentity(feature))
		{
			if (value is INode v)
			{
				SetCont(v, eventId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetProp(v, eventId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref.EqualsIdentity(feature))
		{
			if (value is IReadableNode v)
			{
				SetRef(v, eventId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetEnumProp(out _))
			result.Add(MixedBaseConceptLangLanguage.Instance.BaseConcept_enumProp);
		if (TryGetSdtProp(out _))
			result.Add(MixedBaseConceptLangLanguage.Instance.BaseConcept_sdtProp);
		if (TryGetCont(out _))
			result.Add(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont);
		if (TryGetProp(out _))
			result.Add(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBasePropertyLang.MixedBasePropertyLangLanguage.Instance.BasePropertyIface_Prop);
		if (TryGetRef(out _))
			result.Add(LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseReferenceLang.MixedBaseReferenceLangLanguage.Instance.BaseReferenceIface_Ref);
		return result;
	}

	/// <inheritdoc/>
        protected override bool DetachChild(INode child)
	{
		if (base.DetachChild(child))
			return true;
		Containment? c = GetContainmentOf(child);
		if (LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont.EqualsIdentity(c))
		{
			_cont = null;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override Containment? GetContainmentOf(INode child)
	{
		Containment? result = base.GetContainmentOf(child);
		if (result != null)
			return result;
		if (ReferenceEquals(_cont, child))
			return LionWeb.Core.Test.Languages.Generated.V2025_1.Mixed.MixedBaseContainmentLang.MixedBaseContainmentLangLanguage.Instance.BaseContainmentIface_Cont;
		return null;
	}
}