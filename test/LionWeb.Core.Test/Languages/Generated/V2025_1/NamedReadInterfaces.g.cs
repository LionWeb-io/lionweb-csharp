// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2025_1.NamedLangReadInterfaces;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2025_1;
using Notification;
using Notification.Partition.Emitter;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

[LionCoreLanguage(Key = "key-NamedLang", Version = "1")]
public partial class NamedReadInterfacesLanguage : LanguageBase<INamedReadInterfacesFactory>
{
	public static readonly NamedReadInterfacesLanguage Instance = new Lazy<NamedReadInterfacesLanguage>(() => new("id-NamedLang")).Value;
	public NamedReadInterfacesLanguage(string id) : base(id, LionWebVersions.v2025_1)
	{
		_iface = new(() => new InterfaceBase<NamedReadInterfacesLanguage>("id-Iface", this) { Key = "key-Iface", Name = "Iface" });
		_ifaceConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-IfaceConcept", this) { Key = "key-IfaceConcept", Name = "IfaceConcept", Abstract = false, Partition = false, ImplementsLazy = new(() => [Iface]) });
		_namedAbstractConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-NamedAbstractConcept", this) { Key = "key-NamedAbstractConcept", Name = "NamedAbstractConcept", Abstract = true, Partition = false, ImplementsLazy = new(() => [_builtIns.INamed]) });
		_namedAnn = new(() => new AnnotationBase<NamedReadInterfacesLanguage>("id-NamedAnn", this) { Key = "key-NamedAnn", Name = "NamedAnn", AnnotatesLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [_builtIns.INamed]) });
		_namedConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-NamedConcept", this) { Key = "key-NamedConcept", Name = "NamedConcept", Abstract = false, Partition = false, ImplementsLazy = new(() => [_builtIns.INamed]) });
		_namedConcreteConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-NamedConcreteConcept", this) { Key = "key-NamedConcreteConcept", Name = "NamedConcreteConcept", Abstract = false, Partition = false, ExtendsLazy = new(() => NamedAbstractConcept) });
		_namedIface = new(() => new InterfaceBase<NamedReadInterfacesLanguage>("id-NamedIface", this) { Key = "key-NamedIface", Name = "NamedIface", ExtendsLazy = new(() => [_builtIns.INamed]) });
		_namedIfaceAnn = new(() => new AnnotationBase<NamedReadInterfacesLanguage>("id-NamedIfaceAnn", this) { Key = "key-NamedIfaceAnn", Name = "NamedIfaceAnn", AnnotatesLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [NamedIface]) });
		_namedIfaceConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-NamedIfaceConcept", this) { Key = "key-NamedIfaceConcept", Name = "NamedIfaceConcept", Abstract = false, Partition = false, ImplementsLazy = new(() => [NamedIface]) });
		_namedSubConcept = new(() => new ConceptBase<NamedReadInterfacesLanguage>("id-NamedSubConcept", this) { Key = "key-NamedSubConcept", Name = "NamedSubConcept", Abstract = false, Partition = false, ExtendsLazy = new(() => NamedConcept), ImplementsLazy = new(() => [_builtIns.INamed]) });
		_factory = new NamedReadInterfacesFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [Iface, IfaceConcept, NamedAbstractConcept, NamedAnn, NamedConcept, NamedConcreteConcept, NamedIface, NamedIfaceAnn, NamedIfaceConcept, NamedSubConcept];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "key-NamedLang";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "NamedReadInterfaces";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Interface> _iface;
	public Interface Iface => _iface.Value;

	private readonly Lazy<Concept> _ifaceConcept;
	public Concept IfaceConcept => _ifaceConcept.Value;

	private readonly Lazy<Concept> _namedAbstractConcept;
	public Concept NamedAbstractConcept => _namedAbstractConcept.Value;

	private readonly Lazy<Annotation> _namedAnn;
	public Annotation NamedAnn => _namedAnn.Value;

	private readonly Lazy<Concept> _namedConcept;
	public Concept NamedConcept => _namedConcept.Value;

	private readonly Lazy<Concept> _namedConcreteConcept;
	public Concept NamedConcreteConcept => _namedConcreteConcept.Value;

	private readonly Lazy<Interface> _namedIface;
	public Interface NamedIface => _namedIface.Value;

	private readonly Lazy<Annotation> _namedIfaceAnn;
	public Annotation NamedIfaceAnn => _namedIfaceAnn.Value;

	private readonly Lazy<Concept> _namedIfaceConcept;
	public Concept NamedIfaceConcept => _namedIfaceConcept.Value;

	private readonly Lazy<Concept> _namedSubConcept;
	public Concept NamedSubConcept => _namedSubConcept.Value;
}

public partial interface INamedReadInterfacesFactory : INodeFactory
{
	public IfaceConcept NewIfaceConcept(string id);
	public IfaceConcept CreateIfaceConcept();
	public NamedAnn NewNamedAnn(string id);
	public NamedAnn CreateNamedAnn();
	public NamedConcept NewNamedConcept(string id);
	public NamedConcept CreateNamedConcept();
	public NamedConcreteConcept NewNamedConcreteConcept(string id);
	public NamedConcreteConcept CreateNamedConcreteConcept();
	public NamedIfaceAnn NewNamedIfaceAnn(string id);
	public NamedIfaceAnn CreateNamedIfaceAnn();
	public NamedIfaceConcept NewNamedIfaceConcept(string id);
	public NamedIfaceConcept CreateNamedIfaceConcept();
	public NamedSubConcept NewNamedSubConcept(string id);
	public NamedSubConcept CreateNamedSubConcept();
}

public class NamedReadInterfacesFactory : AbstractBaseNodeFactory, INamedReadInterfacesFactory
{
	private readonly NamedReadInterfacesLanguage _language;
	public NamedReadInterfacesFactory(NamedReadInterfacesLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		if (_language.IfaceConcept.EqualsIdentity(classifier))
			return NewIfaceConcept(id);
		if (_language.NamedAnn.EqualsIdentity(classifier))
			return NewNamedAnn(id);
		if (_language.NamedConcept.EqualsIdentity(classifier))
			return NewNamedConcept(id);
		if (_language.NamedConcreteConcept.EqualsIdentity(classifier))
			return NewNamedConcreteConcept(id);
		if (_language.NamedIfaceAnn.EqualsIdentity(classifier))
			return NewNamedIfaceAnn(id);
		if (_language.NamedIfaceConcept.EqualsIdentity(classifier))
			return NewNamedIfaceConcept(id);
		if (_language.NamedSubConcept.EqualsIdentity(classifier))
			return NewNamedSubConcept(id);
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}

	public virtual IfaceConcept NewIfaceConcept(string id) => new(id);
	public virtual IfaceConcept CreateIfaceConcept() => NewIfaceConcept(GetNewId());
	public virtual NamedAnn NewNamedAnn(string id) => new(id);
	public virtual NamedAnn CreateNamedAnn() => NewNamedAnn(GetNewId());
	public virtual NamedConcept NewNamedConcept(string id) => new(id);
	public virtual NamedConcept CreateNamedConcept() => NewNamedConcept(GetNewId());
	public virtual NamedConcreteConcept NewNamedConcreteConcept(string id) => new(id);
	public virtual NamedConcreteConcept CreateNamedConcreteConcept() => NewNamedConcreteConcept(GetNewId());
	public virtual NamedIfaceAnn NewNamedIfaceAnn(string id) => new(id);
	public virtual NamedIfaceAnn CreateNamedIfaceAnn() => NewNamedIfaceAnn(GetNewId());
	public virtual NamedIfaceConcept NewNamedIfaceConcept(string id) => new(id);
	public virtual NamedIfaceConcept CreateNamedIfaceConcept() => NewNamedIfaceConcept(GetNewId());
	public virtual NamedSubConcept NewNamedSubConcept(string id) => new(id);
	public virtual NamedSubConcept CreateNamedSubConcept() => NewNamedSubConcept(GetNewId());
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-Iface")]
public partial interface Iface : IReadableNode
{
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-IfaceConcept")]
public partial class IfaceConcept : ConceptInstanceBase, Iface
{
	public IfaceConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.IfaceConcept;
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedAbstractConcept")]
public abstract partial class NamedAbstractConcept : ConceptInstanceBase, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2025_1.BuiltInsLanguage_2025_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public NamedAbstractConcept SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public NamedAbstractConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.NamedAbstractConcept;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedAnn")]
public partial class NamedAnn : AnnotationInstanceBase, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2025_1.BuiltInsLanguage_2025_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public NamedAnn SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public NamedAnn(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => NamedReadInterfacesLanguage.Instance.NamedAnn;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedConcept")]
public partial class NamedConcept : ConceptInstanceBase, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2025_1.BuiltInsLanguage_2025_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public NamedConcept SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public NamedConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.NamedConcept;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedConcreteConcept")]
public partial class NamedConcreteConcept : NamedAbstractConcept
{
	public NamedConcreteConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.NamedConcreteConcept;
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedIface")]
public partial interface NamedIface : INamed, IReadableNode
{
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedIfaceAnn")]
public partial class NamedIfaceAnn : AnnotationInstanceBase, NamedIface, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2025_1.BuiltInsLanguage_2025_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public NamedIfaceAnn SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public NamedIfaceAnn(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => NamedReadInterfacesLanguage.Instance.NamedIfaceAnn;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedIfaceConcept")]
public partial class NamedIfaceConcept : ConceptInstanceBase, NamedIface, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2025_1.BuiltInsLanguage_2025_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public NamedIfaceConcept SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public NamedIfaceConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.NamedIfaceConcept;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(NamedReadInterfacesLanguage), Key = "key-NamedSubConcept")]
public partial class NamedSubConcept : NamedConcept, INamedWritable
{
	public NamedSubConcept(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => NamedReadInterfacesLanguage.Instance.NamedSubConcept;
}