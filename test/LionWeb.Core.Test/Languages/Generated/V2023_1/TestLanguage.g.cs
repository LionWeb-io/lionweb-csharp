// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage;
using LionWeb.Core;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Notification;
using LionWeb.Core.Notification.Partition;
using LionWeb.Core.Notification.Partition.Emitter;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2023_1;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

[LionCoreLanguage(Key = "TestLanguage", Version = "0")]
public partial class TestLanguageLanguage : LanguageBase<ITestLanguageFactory>
{
	public static readonly TestLanguageLanguage Instance = new Lazy<TestLanguageLanguage>(() => new("TestLanguage")).Value;
	public TestLanguageLanguage(string id) : base(id, LionWebVersions.v2023_1)
	{
		_dataTypeTestConcept = new(() => new ConceptBase<TestLanguageLanguage>("DataTypeTestConcept", this) { Key = "DataTypeTestConcept", Name = "DataTypeTestConcept", Abstract = false, Partition = true, FeaturesLazy = new(() => [DataTypeTestConcept_booleanValue_0_1, DataTypeTestConcept_booleanValue_1, DataTypeTestConcept_enumValue_0_1, DataTypeTestConcept_enumValue_1, DataTypeTestConcept_integerValue_0_1, DataTypeTestConcept_integerValue_1, DataTypeTestConcept_stringValue_0_1, DataTypeTestConcept_stringValue_1]) });
		_dataTypeTestConcept_booleanValue_0_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-booleanValue_0_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-booleanValue_0_1", Name = "booleanValue_0_1", Optional = true, Type = _builtIns.Boolean });
		_dataTypeTestConcept_booleanValue_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-booleanValue_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-booleanValue_1", Name = "booleanValue_1", Optional = false, Type = _builtIns.Boolean });
		_dataTypeTestConcept_enumValue_0_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-enumValue_0_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-enumValue_0_1", Name = "enumValue_0_1", Optional = true, Type = TestEnumeration });
		_dataTypeTestConcept_enumValue_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-enumValue_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-enumValue_1", Name = "enumValue_1", Optional = false, Type = TestEnumeration });
		_dataTypeTestConcept_integerValue_0_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-integerValue_0_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-integerValue_0_1", Name = "integerValue_0_1", Optional = true, Type = _builtIns.Integer });
		_dataTypeTestConcept_integerValue_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-integerValue_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-integerValue_1", Name = "integerValue_1", Optional = false, Type = _builtIns.Integer });
		_dataTypeTestConcept_stringValue_0_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-stringValue_0_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-stringValue_0_1", Name = "stringValue_0_1", Optional = true, Type = _builtIns.String });
		_dataTypeTestConcept_stringValue_1 = new(() => new PropertyBase<TestLanguageLanguage>("DataTypeTestConcept-stringValue_1", DataTypeTestConcept, this) { Key = "DataTypeTestConcept-stringValue_1", Name = "stringValue_1", Optional = false, Type = _builtIns.String });
		_linkTestConcept = new(() => new ConceptBase<TestLanguageLanguage>("LinkTestConcept", this) { Key = "LinkTestConcept", Name = "LinkTestConcept", Abstract = false, Partition = true, ImplementsLazy = new(() => [_builtIns.INamed]), FeaturesLazy = new(() => [LinkTestConcept_containment_0_1, LinkTestConcept_containment_0_n, LinkTestConcept_containment_1, LinkTestConcept_containment_1_n, LinkTestConcept_reference_0_1, LinkTestConcept_reference_0_n, LinkTestConcept_reference_1, LinkTestConcept_reference_1_n]) });
		_linkTestConcept_containment_0_1 = new(() => new ContainmentBase<TestLanguageLanguage>("LinkTestConcept-containment_0_1", LinkTestConcept, this) { Key = "LinkTestConcept-containment_0_1", Name = "containment_0_1", Optional = true, Multiple = false, Type = LinkTestConcept });
		_linkTestConcept_containment_0_n = new(() => new ContainmentBase<TestLanguageLanguage>("LinkTestConcept-containment_0_n", LinkTestConcept, this) { Key = "LinkTestConcept-containment_0_n", Name = "containment_0_n", Optional = true, Multiple = true, Type = LinkTestConcept });
		_linkTestConcept_containment_1 = new(() => new ContainmentBase<TestLanguageLanguage>("LinkTestConcept-containment_1", LinkTestConcept, this) { Key = "LinkTestConcept-containment_1", Name = "containment_1", Optional = false, Multiple = false, Type = LinkTestConcept });
		_linkTestConcept_containment_1_n = new(() => new ContainmentBase<TestLanguageLanguage>("LinkTestConcept-containment_1_n", LinkTestConcept, this) { Key = "LinkTestConcept-containment_1_n", Name = "containment_1_n", Optional = false, Multiple = true, Type = LinkTestConcept });
		_linkTestConcept_reference_0_1 = new(() => new ReferenceBase<TestLanguageLanguage>("LinkTestConcept-reference_0_1", LinkTestConcept, this) { Key = "LinkTestConcept-reference_0_1", Name = "reference_0_1", Optional = true, Multiple = false, Type = LinkTestConcept });
		_linkTestConcept_reference_0_n = new(() => new ReferenceBase<TestLanguageLanguage>("LinkTestConcept-reference_0_n", LinkTestConcept, this) { Key = "LinkTestConcept-reference_0_n", Name = "reference_0_n", Optional = true, Multiple = true, Type = LinkTestConcept });
		_linkTestConcept_reference_1 = new(() => new ReferenceBase<TestLanguageLanguage>("LinkTestConcept-reference_1", LinkTestConcept, this) { Key = "LinkTestConcept-reference_1", Name = "reference_1", Optional = false, Multiple = false, Type = LinkTestConcept });
		_linkTestConcept_reference_1_n = new(() => new ReferenceBase<TestLanguageLanguage>("LinkTestConcept-reference_1_n", LinkTestConcept, this) { Key = "LinkTestConcept-reference_1_n", Name = "reference_1_n", Optional = false, Multiple = true, Type = LinkTestConcept });
		_secondTestEnumeration = new(() => new EnumerationBase<TestLanguageLanguage>("SecondTestEnumeration", this) { Key = "SecondTestEnumeration", Name = "SecondTestEnumeration", LiteralsLazy = new(() => [SecondTestEnumeration_literal1, SecondTestEnumeration_literal2, SecondTestEnumeration_literal3]) });
		_secondTestEnumeration_literal1 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("SecondTestEnumeration-literal1", SecondTestEnumeration, this) { Key = "SecondTestEnumeration-literal1", Name = "literal1" });
		_secondTestEnumeration_literal2 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("SecondTestEnumeration-literal2", SecondTestEnumeration, this) { Key = "SecondTestEnumeration-literal2", Name = "literal2" });
		_secondTestEnumeration_literal3 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("SecondTestEnumeration-literal3", SecondTestEnumeration, this) { Key = "SecondTestEnumeration-literal3", Name = "literal3" });
		_testAnnotation = new(() => new AnnotationBase<TestLanguageLanguage>("TestAnnotation", this) { Key = "TestAnnotation", Name = "TestAnnotation", AnnotatesLazy = new(() => _builtIns.Node) });
		_testEnumeration = new(() => new EnumerationBase<TestLanguageLanguage>("TestEnumeration", this) { Key = "TestEnumeration", Name = "TestEnumeration", LiteralsLazy = new(() => [TestEnumeration_literal1, TestEnumeration_literal2, TestEnumeration_literal3]) });
		_testEnumeration_literal1 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("TestEnumeration-literal1", TestEnumeration, this) { Key = "TestEnumeration-literal1", Name = "literal1" });
		_testEnumeration_literal2 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("TestEnumeration-literal2", TestEnumeration, this) { Key = "TestEnumeration-literal2", Name = "literal2" });
		_testEnumeration_literal3 = new(() => new EnumerationLiteralBase<TestLanguageLanguage>("TestEnumeration-literal3", TestEnumeration, this) { Key = "TestEnumeration-literal3", Name = "literal3" });
		_factory = new TestLanguageFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [DataTypeTestConcept, LinkTestConcept, SecondTestEnumeration, TestAnnotation, TestEnumeration];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "TestLanguage";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "TestLanguage";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "0";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Concept> _dataTypeTestConcept;
	public Concept DataTypeTestConcept => _dataTypeTestConcept.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_booleanValue_0_1;
	public Property DataTypeTestConcept_booleanValue_0_1 => _dataTypeTestConcept_booleanValue_0_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_booleanValue_1;
	public Property DataTypeTestConcept_booleanValue_1 => _dataTypeTestConcept_booleanValue_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_enumValue_0_1;
	public Property DataTypeTestConcept_enumValue_0_1 => _dataTypeTestConcept_enumValue_0_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_enumValue_1;
	public Property DataTypeTestConcept_enumValue_1 => _dataTypeTestConcept_enumValue_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_integerValue_0_1;
	public Property DataTypeTestConcept_integerValue_0_1 => _dataTypeTestConcept_integerValue_0_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_integerValue_1;
	public Property DataTypeTestConcept_integerValue_1 => _dataTypeTestConcept_integerValue_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_stringValue_0_1;
	public Property DataTypeTestConcept_stringValue_0_1 => _dataTypeTestConcept_stringValue_0_1.Value;

	private readonly Lazy<Property> _dataTypeTestConcept_stringValue_1;
	public Property DataTypeTestConcept_stringValue_1 => _dataTypeTestConcept_stringValue_1.Value;

	private readonly Lazy<Concept> _linkTestConcept;
	public Concept LinkTestConcept => _linkTestConcept.Value;

	private readonly Lazy<Containment> _linkTestConcept_containment_0_1;
	public Containment LinkTestConcept_containment_0_1 => _linkTestConcept_containment_0_1.Value;

	private readonly Lazy<Containment> _linkTestConcept_containment_0_n;
	public Containment LinkTestConcept_containment_0_n => _linkTestConcept_containment_0_n.Value;

	private readonly Lazy<Containment> _linkTestConcept_containment_1;
	public Containment LinkTestConcept_containment_1 => _linkTestConcept_containment_1.Value;

	private readonly Lazy<Containment> _linkTestConcept_containment_1_n;
	public Containment LinkTestConcept_containment_1_n => _linkTestConcept_containment_1_n.Value;

	private readonly Lazy<Reference> _linkTestConcept_reference_0_1;
	public Reference LinkTestConcept_reference_0_1 => _linkTestConcept_reference_0_1.Value;

	private readonly Lazy<Reference> _linkTestConcept_reference_0_n;
	public Reference LinkTestConcept_reference_0_n => _linkTestConcept_reference_0_n.Value;

	private readonly Lazy<Reference> _linkTestConcept_reference_1;
	public Reference LinkTestConcept_reference_1 => _linkTestConcept_reference_1.Value;

	private readonly Lazy<Reference> _linkTestConcept_reference_1_n;
	public Reference LinkTestConcept_reference_1_n => _linkTestConcept_reference_1_n.Value;

	private readonly Lazy<Enumeration> _secondTestEnumeration;
	public Enumeration SecondTestEnumeration => _secondTestEnumeration.Value;

	private readonly Lazy<EnumerationLiteral> _secondTestEnumeration_literal1;
	public EnumerationLiteral SecondTestEnumeration_literal1 => _secondTestEnumeration_literal1.Value;

	private readonly Lazy<EnumerationLiteral> _secondTestEnumeration_literal2;
	public EnumerationLiteral SecondTestEnumeration_literal2 => _secondTestEnumeration_literal2.Value;

	private readonly Lazy<EnumerationLiteral> _secondTestEnumeration_literal3;
	public EnumerationLiteral SecondTestEnumeration_literal3 => _secondTestEnumeration_literal3.Value;

	private readonly Lazy<Annotation> _testAnnotation;
	public Annotation TestAnnotation => _testAnnotation.Value;

	private readonly Lazy<Enumeration> _testEnumeration;
	public Enumeration TestEnumeration => _testEnumeration.Value;

	private readonly Lazy<EnumerationLiteral> _testEnumeration_literal1;
	public EnumerationLiteral TestEnumeration_literal1 => _testEnumeration_literal1.Value;

	private readonly Lazy<EnumerationLiteral> _testEnumeration_literal2;
	public EnumerationLiteral TestEnumeration_literal2 => _testEnumeration_literal2.Value;

	private readonly Lazy<EnumerationLiteral> _testEnumeration_literal3;
	public EnumerationLiteral TestEnumeration_literal3 => _testEnumeration_literal3.Value;
}

public partial interface ITestLanguageFactory : INodeFactory
{
	public DataTypeTestConcept NewDataTypeTestConcept(string id);
	public DataTypeTestConcept CreateDataTypeTestConcept();
	public LinkTestConcept NewLinkTestConcept(string id);
	public LinkTestConcept CreateLinkTestConcept();
	public TestAnnotation NewTestAnnotation(string id);
	public TestAnnotation CreateTestAnnotation();
}

public class TestLanguageFactory : AbstractBaseNodeFactory, ITestLanguageFactory
{
	private readonly TestLanguageLanguage _language;
	public TestLanguageFactory(TestLanguageLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		if (_language.DataTypeTestConcept.EqualsIdentity(classifier))
			return NewDataTypeTestConcept(id);
		if (_language.LinkTestConcept.EqualsIdentity(classifier))
			return NewLinkTestConcept(id);
		if (_language.TestAnnotation.EqualsIdentity(classifier))
			return NewTestAnnotation(id);
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		if (_language.SecondTestEnumeration.EqualsIdentity(literal.GetEnumeration()))
			return EnumValueFor<SecondTestEnumeration>(literal);
		if (_language.TestEnumeration.EqualsIdentity(literal.GetEnumeration()))
			return EnumValueFor<TestEnumeration>(literal);
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}

	public virtual DataTypeTestConcept NewDataTypeTestConcept(string id) => new(id);
	public virtual DataTypeTestConcept CreateDataTypeTestConcept() => NewDataTypeTestConcept(GetNewId());
	public virtual LinkTestConcept NewLinkTestConcept(string id) => new(id);
	public virtual LinkTestConcept CreateLinkTestConcept() => NewLinkTestConcept(GetNewId());
	public virtual TestAnnotation NewTestAnnotation(string id) => new(id);
	public virtual TestAnnotation CreateTestAnnotation() => NewTestAnnotation(GetNewId());
}

[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept")]
public partial class DataTypeTestConcept : ConceptInstanceBase, IPartitionInstance<INode>
{
	private bool? _booleanValue_0_1 = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-booleanValue_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public bool? BooleanValue_0_1 { get => _booleanValue_0_1; set => SetBooleanValue_0_1(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetBooleanValue_0_1([NotNullWhenAttribute(true)] out bool? booleanValue_0_1)
	{
		booleanValue_0_1 = _booleanValue_0_1;
		return _booleanValue_0_1 != null;
	}

	/// <remarks>Optional Property</remarks>
        public DataTypeTestConcept SetBooleanValue_0_1(bool? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_0_1, this, value, _booleanValue_0_1, notificationId);
		emitter.CollectOldData();
		_booleanValue_0_1 = value;
		emitter.Notify();
		return this;
	}

	private bool? _booleanValue_1 = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If BooleanValue_1 has not been set</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-booleanValue_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public bool BooleanValue_1 { get => _booleanValue_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_1); set => SetBooleanValue_1(value); }

	/// <remarks>Required Property</remarks>
        public bool TryGetBooleanValue_1([NotNullWhenAttribute(true)] out bool? booleanValue_1)
	{
		booleanValue_1 = _booleanValue_1;
		return _booleanValue_1 != null;
	}

	/// <remarks>Required Property</remarks>
        public DataTypeTestConcept SetBooleanValue_1(bool value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_1, this, value, _booleanValue_1, notificationId);
		emitter.CollectOldData();
		_booleanValue_1 = value;
		emitter.Notify();
		return this;
	}

	private TestEnumeration? _enumValue_0_1 = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-enumValue_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public TestEnumeration? EnumValue_0_1 { get => _enumValue_0_1; set => SetEnumValue_0_1(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetEnumValue_0_1([NotNullWhenAttribute(true)] out TestEnumeration? enumValue_0_1)
	{
		enumValue_0_1 = _enumValue_0_1;
		return _enumValue_0_1 != null;
	}

	/// <remarks>Optional Property</remarks>
        public DataTypeTestConcept SetEnumValue_0_1(TestEnumeration? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_0_1, this, value, _enumValue_0_1, notificationId);
		emitter.CollectOldData();
		_enumValue_0_1 = value;
		emitter.Notify();
		return this;
	}

	private TestEnumeration? _enumValue_1 = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If EnumValue_1 has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-enumValue_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public TestEnumeration EnumValue_1 { get => _enumValue_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1); set => SetEnumValue_1(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetEnumValue_1([NotNullWhenAttribute(true)] out TestEnumeration? enumValue_1)
	{
		enumValue_1 = _enumValue_1;
		return _enumValue_1 != null;
	}

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public DataTypeTestConcept SetEnumValue_1(TestEnumeration value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1);
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1, this, value, _enumValue_1, notificationId);
		emitter.CollectOldData();
		_enumValue_1 = value;
		emitter.Notify();
		return this;
	}

	private int? _integerValue_0_1 = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-integerValue_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public int? IntegerValue_0_1 { get => _integerValue_0_1; set => SetIntegerValue_0_1(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetIntegerValue_0_1([NotNullWhenAttribute(true)] out int? integerValue_0_1)
	{
		integerValue_0_1 = _integerValue_0_1;
		return _integerValue_0_1 != null;
	}

	/// <remarks>Optional Property</remarks>
        public DataTypeTestConcept SetIntegerValue_0_1(int? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_0_1, this, value, _integerValue_0_1, notificationId);
		emitter.CollectOldData();
		_integerValue_0_1 = value;
		emitter.Notify();
		return this;
	}

	private int? _integerValue_1 = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If IntegerValue_1 has not been set</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-integerValue_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public int IntegerValue_1 { get => _integerValue_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_1); set => SetIntegerValue_1(value); }

	/// <remarks>Required Property</remarks>
        public bool TryGetIntegerValue_1([NotNullWhenAttribute(true)] out int? integerValue_1)
	{
		integerValue_1 = _integerValue_1;
		return _integerValue_1 != null;
	}

	/// <remarks>Required Property</remarks>
        public DataTypeTestConcept SetIntegerValue_1(int value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_1, this, value, _integerValue_1, notificationId);
		emitter.CollectOldData();
		_integerValue_1 = value;
		emitter.Notify();
		return this;
	}

	private string? _stringValue_0_1 = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-stringValue_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? StringValue_0_1 { get => _stringValue_0_1; set => SetStringValue_0_1(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetStringValue_0_1([NotNullWhenAttribute(true)] out string? stringValue_0_1)
	{
		stringValue_0_1 = _stringValue_0_1;
		return _stringValue_0_1 != null;
	}

	/// <remarks>Optional Property</remarks>
        public DataTypeTestConcept SetStringValue_0_1(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_0_1, this, value, _stringValue_0_1, notificationId);
		emitter.CollectOldData();
		_stringValue_0_1 = value;
		emitter.Notify();
		return this;
	}

	private string? _stringValue_1 = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If StringValue_1 has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "DataTypeTestConcept-stringValue_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string StringValue_1 { get => _stringValue_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1); set => SetStringValue_1(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetStringValue_1([NotNullWhenAttribute(true)] out string? stringValue_1)
	{
		stringValue_1 = _stringValue_1;
		return _stringValue_1 != null;
	}

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public DataTypeTestConcept SetStringValue_1(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1);
		PropertyNotificationEmitter emitter = new(TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1, this, value, _stringValue_1, notificationId);
		emitter.CollectOldData();
		_stringValue_1 = value;
		emitter.Notify();
		return this;
	}

	public DataTypeTestConcept(string id) : base(id)
	{
		_eventProcessor = new(this);
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => TestLanguageLanguage.Instance.DataTypeTestConcept;
	private readonly PartitionEventProcessor _eventProcessor;
	public IPartitionProcessor? GetProcessor() => _eventProcessor;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_0_1.EqualsIdentity(feature))
		{
			result = BooleanValue_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_1.EqualsIdentity(feature))
		{
			result = BooleanValue_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_0_1.EqualsIdentity(feature))
		{
			result = EnumValue_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1.EqualsIdentity(feature))
		{
			result = EnumValue_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_0_1.EqualsIdentity(feature))
		{
			result = IntegerValue_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_1.EqualsIdentity(feature))
		{
			result = IntegerValue_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_0_1.EqualsIdentity(feature))
		{
			result = StringValue_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1.EqualsIdentity(feature))
		{
			result = StringValue_1;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_0_1.EqualsIdentity(feature))
		{
			if (value is null or bool)
			{
				SetBooleanValue_0_1((bool?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_1.EqualsIdentity(feature))
		{
			if (value is bool v)
			{
				SetBooleanValue_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_0_1.EqualsIdentity(feature))
		{
			if (value is null or LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.TestEnumeration)
			{
				SetEnumValue_0_1((LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.TestEnumeration?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1.EqualsIdentity(feature))
		{
			if (value is LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.TestEnumeration v)
			{
				SetEnumValue_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_0_1.EqualsIdentity(feature))
		{
			if (value is null or int)
			{
				SetIntegerValue_0_1((int?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_1.EqualsIdentity(feature))
		{
			if (value is int v)
			{
				SetIntegerValue_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_0_1.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetStringValue_0_1((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetStringValue_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetBooleanValue_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_0_1);
		if (TryGetBooleanValue_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_booleanValue_1);
		if (TryGetEnumValue_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_0_1);
		if (TryGetEnumValue_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_enumValue_1);
		if (TryGetIntegerValue_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_0_1);
		if (TryGetIntegerValue_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_integerValue_1);
		if (TryGetStringValue_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_0_1);
		if (TryGetStringValue_1(out _))
			result.Add(TestLanguageLanguage.Instance.DataTypeTestConcept_stringValue_1);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept")]
public partial class LinkTestConcept : ConceptInstanceBase, INamedWritable, IPartitionInstance<INode>
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2023_1.BuiltInsLanguage_2023_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public LinkTestConcept SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter emitter = new(_builtIns.INamed_name, this, value, _name, notificationId);
		emitter.CollectOldData();
		_name = value;
		emitter.Notify();
		return this;
	}

	private LinkTestConcept? _containment_0_1 = null;
	/// <remarks>Optional Single Containment</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-containment_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = true, Multiple = false)]
	public LinkTestConcept? Containment_0_1 { get => _containment_0_1; set => SetContainment_0_1(value); }

	/// <remarks>Optional Single Containment</remarks>
        public bool TryGetContainment_0_1([NotNullWhenAttribute(true)] out LinkTestConcept? containment_0_1)
	{
		containment_0_1 = _containment_0_1;
		return _containment_0_1 != null;
	}

	/// <remarks>Optional Single Containment</remarks>
        public LinkTestConcept SetContainment_0_1(LinkTestConcept? value, INotificationId? notificationId = null)
	{
		ContainmentSingleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1, this, value, _containment_0_1, notificationId);
		emitter.CollectOldData();
		SetParentNull(_containment_0_1);
		AttachChild(value);
		_containment_0_1 = value;
		emitter.Notify();
		return this;
	}

	private readonly List<LinkTestConcept> _containment_0_n = [];
	/// <remarks>Optional Multiple Containment</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-containment_0_n")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = true, Multiple = true)]
	public IReadOnlyList<LinkTestConcept> Containment_0_n { get => _containment_0_n.AsReadOnly(); init => AddContainment_0_n(value); }

	/// <remarks>Optional Multiple Containment</remarks>
        public bool TryGetContainment_0_n([NotNullWhenAttribute(true)] out IReadOnlyList<LinkTestConcept> containment_0_n)
	{
		containment_0_n = _containment_0_n;
		return _containment_0_n.Count != 0;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public LinkTestConcept AddContainment_0_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
		AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
		ContainmentAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n, this, safeNodes, _containment_0_n, null, notificationId);
		emitter.CollectOldData();
		_containment_0_n.AddRange(SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n));
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public LinkTestConcept InsertContainment_0_n(int index, IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _containment_0_n);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
		AssureNoSelfMove(index, safeNodes, _containment_0_n);
		AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
		ContainmentAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n, this, safeNodes, _containment_0_n, index, notificationId);
		emitter.CollectOldData();
		_containment_0_n.InsertRange(index, SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n));
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Containment</remarks>
        public LinkTestConcept RemoveContainment_0_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		RemoveSelfParent(nodes?.ToList(), _containment_0_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n, ContainmentRemover<LinkTestConcept>(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n));
		return this;
	}

	private LinkTestConcept? _containment_1 = null;
	/// <remarks>Required Single Containment</remarks>
    	/// <exception cref = "UnsetFeatureException">If Containment_1 has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-containment_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = false, Multiple = false)]
	public LinkTestConcept Containment_1 { get => _containment_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.LinkTestConcept_containment_1); set => SetContainment_1(value); }

	/// <remarks>Required Single Containment</remarks>
        public bool TryGetContainment_1([NotNullWhenAttribute(true)] out LinkTestConcept? containment_1)
	{
		containment_1 = _containment_1;
		return _containment_1 != null;
	}

	/// <remarks>Required Single Containment</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public LinkTestConcept SetContainment_1(LinkTestConcept value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, TestLanguageLanguage.Instance.LinkTestConcept_containment_1);
		ContainmentSingleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_1, this, value, _containment_1, notificationId);
		emitter.CollectOldData();
		SetParentNull(_containment_1);
		AttachChild(value);
		_containment_1 = value;
		emitter.Notify();
		return this;
	}

	private readonly List<LinkTestConcept> _containment_1_n = [];
	/// <remarks>Required Multiple Containment</remarks>
    	/// <exception cref = "UnsetFeatureException">If Containment_1_n is empty</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-containment_1_n")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Containment, Optional = false, Multiple = true)]
	public IReadOnlyList<LinkTestConcept> Containment_1_n { get => AsNonEmptyReadOnly(_containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n); init => AddContainment_1_n(value); }

	/// <remarks>Required Multiple Containment</remarks>
        public bool TryGetContainment_1_n([NotNullWhenAttribute(true)] out IReadOnlyList<LinkTestConcept> containment_1_n)
	{
		containment_1_n = _containment_1_n;
		return _containment_1_n.Count != 0;
	}

	/// <remarks>Required Multiple Containment</remarks>
    	/// <exception cref = "InvalidValueException">If both Containment_1_n and nodes are empty</exception>
        public LinkTestConcept AddContainment_1_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNonEmpty(safeNodes, _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
		ContainmentAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n, this, safeNodes, _containment_1_n, null, notificationId);
		emitter.CollectOldData();
		_containment_1_n.AddRange(SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n));
		emitter.Notify();
		return this;
	}

	/// <remarks>Required Multiple Containment</remarks>
    	/// <exception cref = "InvalidValueException">If both Containment_1_n and nodes are empty</exception>
    	/// <exception cref = "ArgumentOutOfRangeException">If index negative or greater than Containment_1_n.Count</exception>
        public LinkTestConcept InsertContainment_1_n(int index, IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _containment_1_n);
		var safeNodes = nodes?.ToList();
		AssureNonEmpty(safeNodes, _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
		AssureNoSelfMove(index, safeNodes, _containment_1_n);
		ContainmentAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n, this, safeNodes, _containment_1_n, index, notificationId);
		emitter.CollectOldData();
		_containment_1_n.InsertRange(index, SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n));
		emitter.Notify();
		return this;
	}

	/// <remarks>Required Multiple Containment</remarks>
    	/// <exception cref = "InvalidValueException">If Containment_1_n would be empty</exception>
        public LinkTestConcept RemoveContainment_1_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
		AssureNotClearing(safeNodes, _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
		RemoveSelfParent(safeNodes, _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n, ContainmentRemover<LinkTestConcept>(TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n));
		return this;
	}

	private LinkTestConcept? _reference_0_1 = null;
	/// <remarks>Optional Single Reference</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-reference_0_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = true, Multiple = false)]
	public LinkTestConcept? Reference_0_1 { get => _reference_0_1; set => SetReference_0_1(value); }

	/// <remarks>Optional Single Reference</remarks>
        public bool TryGetReference_0_1([NotNullWhenAttribute(true)] out LinkTestConcept? reference_0_1)
	{
		reference_0_1 = _reference_0_1;
		return _reference_0_1 != null;
	}

	/// <remarks>Optional Single Reference</remarks>
        public LinkTestConcept SetReference_0_1(LinkTestConcept? value, INotificationId? notificationId = null)
	{
		ReferenceSingleNotificationEmitter emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_1, this, value, _reference_0_1, notificationId);
		emitter.CollectOldData();
		_reference_0_1 = value;
		emitter.Notify();
		return this;
	}

	private readonly List<LinkTestConcept> _reference_0_n = [];
	/// <remarks>Optional Multiple Reference</remarks>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-reference_0_n")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = true, Multiple = true)]
	public IReadOnlyList<LinkTestConcept> Reference_0_n { get => _reference_0_n.AsReadOnly(); init => AddReference_0_n(value); }

	/// <remarks>Optional Multiple Reference</remarks>
        public bool TryGetReference_0_n([NotNullWhenAttribute(true)] out IReadOnlyList<LinkTestConcept> reference_0_n)
	{
		reference_0_n = _reference_0_n;
		return _reference_0_n.Count != 0;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public LinkTestConcept AddReference_0_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		ReferenceAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n, this, safeNodes, _reference_0_n.Count, notificationId);
		emitter.CollectOldData();
		_reference_0_n.AddRange(safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public LinkTestConcept InsertReference_0_n(int index, IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _reference_0_n);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		ReferenceAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n, this, safeNodes, index, notificationId);
		emitter.CollectOldData();
		_reference_0_n.InsertRange(index, safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public LinkTestConcept RemoveReference_0_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		RemoveAll(safeNodes, _reference_0_n, ReferenceRemover<LinkTestConcept>(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n));
		return this;
	}

	private LinkTestConcept? _reference_1 = null;
	/// <remarks>Required Single Reference</remarks>
    	/// <exception cref = "UnsetFeatureException">If Reference_1 has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-reference_1")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = false, Multiple = false)]
	public LinkTestConcept Reference_1 { get => _reference_1 ?? throw new UnsetFeatureException(TestLanguageLanguage.Instance.LinkTestConcept_reference_1); set => SetReference_1(value); }

	/// <remarks>Required Single Reference</remarks>
        public bool TryGetReference_1([NotNullWhenAttribute(true)] out LinkTestConcept? reference_1)
	{
		reference_1 = _reference_1;
		return _reference_1 != null;
	}

	/// <remarks>Required Single Reference</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public LinkTestConcept SetReference_1(LinkTestConcept value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, TestLanguageLanguage.Instance.LinkTestConcept_reference_1);
		ReferenceSingleNotificationEmitter emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_1, this, value, _reference_1, notificationId);
		emitter.CollectOldData();
		_reference_1 = value;
		emitter.Notify();
		return this;
	}

	private readonly List<LinkTestConcept> _reference_1_n = [];
	/// <remarks>Required Multiple Reference</remarks>
    	/// <exception cref = "UnsetFeatureException">If Reference_1_n is empty</exception>
        [LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "LinkTestConcept-reference_1_n")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = false, Multiple = true)]
	public IReadOnlyList<LinkTestConcept> Reference_1_n { get => AsNonEmptyReadOnly(_reference_1_n, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n); init => AddReference_1_n(value); }

	/// <remarks>Required Multiple Reference</remarks>
        public bool TryGetReference_1_n([NotNullWhenAttribute(true)] out IReadOnlyList<LinkTestConcept> reference_1_n)
	{
		reference_1_n = _reference_1_n;
		return _reference_1_n.Count != 0;
	}

	/// <remarks>Required Multiple Reference</remarks>
    	/// <exception cref = "InvalidValueException">If both Reference_1_n and nodes are empty</exception>
        public LinkTestConcept AddReference_1_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		AssureNonEmpty(safeNodes, _reference_1_n, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		ReferenceAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n, this, safeNodes, _reference_1_n.Count, notificationId);
		emitter.CollectOldData();
		_reference_1_n.AddRange(safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Required Multiple Reference</remarks>
    	/// <exception cref = "InvalidValueException">If both Reference_1_n and nodes are empty</exception>
    	/// <exception cref = "ArgumentOutOfRangeException">If index negative or greater than Reference_1_n.Count</exception>
        public LinkTestConcept InsertReference_1_n(int index, IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _reference_1_n);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		AssureNonEmpty(safeNodes, _reference_1_n, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		ReferenceAddMultipleNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n, this, safeNodes, index, notificationId);
		emitter.CollectOldData();
		_reference_1_n.InsertRange(index, safeNodes);
		emitter.Notify();
		return this;
	}

	/// <remarks>Required Multiple Reference</remarks>
    	/// <exception cref = "InvalidValueException">If Reference_1_n would be empty</exception>
        public LinkTestConcept RemoveReference_1_n(IEnumerable<LinkTestConcept> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		AssureNonEmpty(safeNodes, _reference_1_n, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		AssureNotClearing(safeNodes, _reference_1_n, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		RemoveAll(safeNodes, _reference_1_n, ReferenceRemover<LinkTestConcept>(TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n));
		return this;
	}

	public LinkTestConcept(string id) : base(id)
	{
		_eventProcessor = new(this);
	}

	/// <inheritdoc/>
        public override Concept GetConcept() => TestLanguageLanguage.Instance.LinkTestConcept;
	private readonly PartitionEventProcessor _eventProcessor;
	public IPartitionProcessor? GetProcessor() => _eventProcessor;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1.EqualsIdentity(feature))
		{
			result = Containment_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n.EqualsIdentity(feature))
		{
			result = Containment_0_n;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1.EqualsIdentity(feature))
		{
			result = Containment_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n.EqualsIdentity(feature))
		{
			result = Containment_1_n;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_0_1.EqualsIdentity(feature))
		{
			result = Reference_0_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n.EqualsIdentity(feature))
		{
			result = Reference_0_n;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_1.EqualsIdentity(feature))
		{
			result = Reference_1;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n.EqualsIdentity(feature))
		{
			result = Reference_1_n;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1.EqualsIdentity(feature))
		{
			if (value is null or LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept)
			{
				SetContainment_0_1((LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n.EqualsIdentity(feature))
		{
			var safeNodes = TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n.AsNodes<LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept>(value).ToList();
			ContainmentSetNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n, this, safeNodes, _containment_0_n, notificationId);
			emitter.CollectOldData();
			RemoveSelfParent(_containment_0_n.ToList(), _containment_0_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
			_containment_0_n.AddRange(SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n));
			emitter.Notify();
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1.EqualsIdentity(feature))
		{
			if (value is LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept v)
			{
				SetContainment_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n.EqualsIdentity(feature))
		{
			var safeNodes = TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n.AsNodes<LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept>(value).ToList();
			AssureNonEmpty(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
			ContainmentSetNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n, this, safeNodes, _containment_1_n, notificationId);
			emitter.CollectOldData();
			RemoveSelfParent(_containment_1_n.ToList(), _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
			_containment_1_n.AddRange(SetSelfParent(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n));
			emitter.Notify();
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_0_1.EqualsIdentity(feature))
		{
			if (value is null or LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept)
			{
				SetReference_0_1((LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n.EqualsIdentity(feature))
		{
			var safeNodes = TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n.AsNodes<LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept>(value).ToList();
			AssureNotNull(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
			AssureNotNullMembers(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
			ReferenceSetNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n, this, safeNodes, _reference_0_n, notificationId);
			emitter.CollectOldData();
			_reference_0_n.Clear();
			_reference_0_n.AddRange(safeNodes);
			emitter.Notify();
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_1.EqualsIdentity(feature))
		{
			if (value is LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept v)
			{
				SetReference_1(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n.EqualsIdentity(feature))
		{
			var safeNodes = TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n.AsNodes<LionWeb.Core.Test.Languages.Generated.V2023_1.TestLanguage.LinkTestConcept>(value).ToList();
			AssureNonEmpty(safeNodes, TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
			ReferenceSetNotificationEmitter<LinkTestConcept> emitter = new(TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n, this, safeNodes, _reference_1_n, notificationId);
			emitter.CollectOldData();
			_reference_1_n.Clear();
			_reference_1_n.AddRange(safeNodes);
			emitter.Notify();
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		if (TryGetContainment_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1);
		if (TryGetContainment_0_n(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
		if (TryGetContainment_1(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_containment_1);
		if (TryGetContainment_1_n(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
		if (TryGetReference_0_1(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_1);
		if (TryGetReference_0_n(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_reference_0_n);
		if (TryGetReference_1(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_reference_1);
		if (TryGetReference_1_n(out _))
			result.Add(TestLanguageLanguage.Instance.LinkTestConcept_reference_1_n);
		return result;
	}

	/// <inheritdoc/>
        protected override bool DetachChild(INode child)
	{
		if (base.DetachChild(child))
			return true;
		Containment? c = GetContainmentOf(child);
		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1.EqualsIdentity(c))
		{
			_containment_0_1 = null;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n.EqualsIdentity(c))
		{
			RemoveSelfParent(child, _containment_0_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n);
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1.EqualsIdentity(c))
		{
			_containment_1 = null;
			return true;
		}

		if (TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n.EqualsIdentity(c))
		{
			RemoveSelfParent(child, _containment_1_n, TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n);
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override Containment? GetContainmentOf(INode child)
	{
		Containment? result = base.GetContainmentOf(child);
		if (result != null)
			return result;
		if (ReferenceEquals(_containment_0_1, child))
			return TestLanguageLanguage.Instance.LinkTestConcept_containment_0_1;
		if (child is LinkTestConcept child1 && _containment_0_n.Contains(child1))
			return TestLanguageLanguage.Instance.LinkTestConcept_containment_0_n;
		if (ReferenceEquals(_containment_1, child))
			return TestLanguageLanguage.Instance.LinkTestConcept_containment_1;
		if (child is LinkTestConcept child3 && _containment_1_n.Contains(child3))
			return TestLanguageLanguage.Instance.LinkTestConcept_containment_1_n;
		return null;
	}
}

[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "TestAnnotation")]
public partial class TestAnnotation : AnnotationInstanceBase
{
	public TestAnnotation(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => TestLanguageLanguage.Instance.TestAnnotation;
}

[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "SecondTestEnumeration")]
public enum SecondTestEnumeration
{
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "SecondTestEnumeration-literal1")]
	literal1,
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "SecondTestEnumeration-literal2")]
	literal2,
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "SecondTestEnumeration-literal3")]
	literal3
}

[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "TestEnumeration")]
public enum TestEnumeration
{
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "TestEnumeration-literal1")]
	literal1,
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "TestEnumeration-literal2")]
	literal2,
	[LionCoreMetaPointer(Language = typeof(TestLanguageLanguage), Key = "TestEnumeration-literal3")]
	literal3
}