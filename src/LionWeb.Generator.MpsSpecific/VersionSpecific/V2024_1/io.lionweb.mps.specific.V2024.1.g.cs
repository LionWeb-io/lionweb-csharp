// Generated by the C# M2TypesGenerator: modify at your own risk!
// ReSharper disable InconsistentNaming
// ReSharper disable SuggestVarOrType_SimpleTypes
// ReSharper disable SuggestVarOrType_Elsewhere
#pragma warning disable 1591
#nullable enable
namespace Io.Lionweb.Mps.Specific.V2024_1;
using LionWeb.Core;
using LionWeb.Core.M1.Event;
using LionWeb.Core.M1.Event.Partition.Emitter;
using LionWeb.Core.M2;
using LionWeb.Core.M3;
using LionWeb.Core.Utilities;
using LionWeb.Core.VersionSpecific.V2024_1;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

[LionCoreLanguage(Key = "io-lionweb-mps-specific", Version = "2024.1")]
public partial class SpecificLanguage : LanguageBase<ISpecificFactory>, ISpecificLanguage
{
	public static readonly SpecificLanguage Instance = new Lazy<SpecificLanguage>(() => new("io-lionweb-mps-specific")).Value;
	public SpecificLanguage(string id) : base(id, LionWebVersions.v2024_1)
	{
		_conceptDescription = new(() => new AnnotationBase<SpecificLanguage>("ConceptDescription", this) { Key = "ConceptDescription", Name = "ConceptDescription", AnnotatesLazy = new(() => _m3.Classifier), FeaturesLazy = new(() => [ConceptDescription_conceptAlias, ConceptDescription_conceptShortDescription, ConceptDescription_helpUrl]) });
		_conceptDescription_conceptAlias = new(() => new PropertyBase<SpecificLanguage>("ConceptDescription-conceptAlias", ConceptDescription, this) { Key = "ConceptDescription-conceptAlias", Name = "conceptAlias", Optional = true, Type = _builtIns.String });
		_conceptDescription_conceptShortDescription = new(() => new PropertyBase<SpecificLanguage>("ConceptDescription-conceptShortDescription", ConceptDescription, this) { Key = "ConceptDescription-conceptShortDescription", Name = "conceptShortDescription", Optional = true, Type = _builtIns.String });
		_conceptDescription_helpUrl = new(() => new PropertyBase<SpecificLanguage>("ConceptDescription-helpUrl", ConceptDescription, this) { Key = "ConceptDescription-helpUrl", Name = "helpUrl", Optional = true, Type = _builtIns.String });
		_deprecated = new(() => new AnnotationBase<SpecificLanguage>("Deprecated", this) { Key = "Deprecated", Name = "Deprecated", AnnotatesLazy = new(() => _m3.IKeyed), FeaturesLazy = new(() => [Deprecated_build, Deprecated_comment]) });
		_deprecated_build = new(() => new PropertyBase<SpecificLanguage>("Deprecated-build", Deprecated, this) { Key = "Deprecated-build", Name = "build", Optional = true, Type = _builtIns.String });
		_deprecated_comment = new(() => new PropertyBase<SpecificLanguage>("Deprecated-comment", Deprecated, this) { Key = "Deprecated-comment", Name = "comment", Optional = true, Type = _builtIns.String });
		_keyedDescription = new(() => new AnnotationBase<SpecificLanguage>("KeyedDescription", this) { Key = "KeyedDescription", Name = "KeyedDescription", AnnotatesLazy = new(() => _m3.IKeyed), FeaturesLazy = new(() => [KeyedDescription_documentation, KeyedDescription_seeAlso]) });
		_keyedDescription_documentation = new(() => new PropertyBase<SpecificLanguage>("KeyedDescription-documentation", KeyedDescription, this) { Key = "KeyedDescription-documentation", Name = "documentation", Optional = true, Type = _builtIns.String });
		_keyedDescription_seeAlso = new(() => new ReferenceBase<SpecificLanguage>("KeyedDescription-seeAlso", KeyedDescription, this) { Key = "KeyedDescription-seeAlso", Name = "seeAlso", Optional = true, Multiple = true, Type = _builtIns.Node });
		_shortDescription = new(() => new AnnotationBase<SpecificLanguage>("ShortDescription", this) { Key = "ShortDescription", Name = "ShortDescription", AnnotatesLazy = new(() => _builtIns.Node), FeaturesLazy = new(() => [ShortDescription_description]) });
		_shortDescription_description = new(() => new PropertyBase<SpecificLanguage>("ShortDescription-description", ShortDescription, this) { Key = "ShortDescription-description", Name = "description", Optional = true, Type = _builtIns.String });
		_virtualPackage = new(() => new AnnotationBase<SpecificLanguage>("VirtualPackage", this) { Key = "VirtualPackage", Name = "VirtualPackage", AnnotatesLazy = new(() => _builtIns.Node), ImplementsLazy = new(() => [_builtIns.INamed]) });
		_factory = new SpecificFactory(this);
	}

	/// <inheritdoc/>
        public override IReadOnlyList<LanguageEntity> Entities => [ConceptDescription, Deprecated, KeyedDescription, ShortDescription, VirtualPackage];
	/// <inheritdoc/>
        public override IReadOnlyList<Language> DependsOn => [];

	private const string _key = "io-lionweb-mps-specific";
	/// <inheritdoc/>
        public override string Key => _key;

	private const string _name = "io.lionweb.mps.specific";
	/// <inheritdoc/>
        public override string Name => _name;

	private const string _version = "2024.1";
	/// <inheritdoc/>
        public override string Version => _version;

	private readonly Lazy<Annotation> _conceptDescription;
	public Annotation ConceptDescription => _conceptDescription.Value;

	private readonly Lazy<Property> _conceptDescription_conceptAlias;
	public Property ConceptDescription_conceptAlias => _conceptDescription_conceptAlias.Value;

	private readonly Lazy<Property> _conceptDescription_conceptShortDescription;
	public Property ConceptDescription_conceptShortDescription => _conceptDescription_conceptShortDescription.Value;

	private readonly Lazy<Property> _conceptDescription_helpUrl;
	public Property ConceptDescription_helpUrl => _conceptDescription_helpUrl.Value;

	private readonly Lazy<Annotation> _deprecated;
	public Annotation Deprecated => _deprecated.Value;

	private readonly Lazy<Property> _deprecated_build;
	public Property Deprecated_build => _deprecated_build.Value;

	private readonly Lazy<Property> _deprecated_comment;
	public Property Deprecated_comment => _deprecated_comment.Value;

	private readonly Lazy<Annotation> _keyedDescription;
	public Annotation KeyedDescription => _keyedDescription.Value;

	private readonly Lazy<Property> _keyedDescription_documentation;
	public Property KeyedDescription_documentation => _keyedDescription_documentation.Value;

	private readonly Lazy<Reference> _keyedDescription_seeAlso;
	public Reference KeyedDescription_seeAlso => _keyedDescription_seeAlso.Value;

	private readonly Lazy<Annotation> _shortDescription;
	public Annotation ShortDescription => _shortDescription.Value;

	private readonly Lazy<Property> _shortDescription_description;
	public Property ShortDescription_description => _shortDescription_description.Value;

	private readonly Lazy<Annotation> _virtualPackage;
	public Annotation VirtualPackage => _virtualPackage.Value;
}

public partial interface ISpecificFactory : INodeFactory
{
	public ConceptDescription NewConceptDescription(string id);
	public ConceptDescription CreateConceptDescription();
	public Deprecated NewDeprecated(string id);
	public Deprecated CreateDeprecated();
	public KeyedDescription NewKeyedDescription(string id);
	public KeyedDescription CreateKeyedDescription();
	public ShortDescription NewShortDescription(string id);
	public ShortDescription CreateShortDescription();
	public VirtualPackage NewVirtualPackage(string id);
	public VirtualPackage CreateVirtualPackage();
}

public class SpecificFactory : AbstractBaseNodeFactory, ISpecificFactory
{
	private readonly SpecificLanguage _language;
	public SpecificFactory(SpecificLanguage language) : base(language)
	{
		_language = language;
	}

	/// <inheritdoc/>
        public override INode CreateNode(string id, Classifier classifier)
	{
		if (_language.ConceptDescription.EqualsIdentity(classifier))
			return NewConceptDescription(id);
		if (_language.Deprecated.EqualsIdentity(classifier))
			return NewDeprecated(id);
		if (_language.KeyedDescription.EqualsIdentity(classifier))
			return NewKeyedDescription(id);
		if (_language.ShortDescription.EqualsIdentity(classifier))
			return NewShortDescription(id);
		if (_language.VirtualPackage.EqualsIdentity(classifier))
			return NewVirtualPackage(id);
		throw new UnsupportedClassifierException(classifier);
	}

	/// <inheritdoc/>
        public override Enum GetEnumerationLiteral(EnumerationLiteral literal)
	{
		throw new UnsupportedEnumerationLiteralException(literal);
	}

	/// <inheritdoc/>
        public override IStructuredDataTypeInstance CreateStructuredDataTypeInstance(StructuredDataType structuredDataType, IFieldValues fieldValues)
	{
		throw new UnsupportedStructuredDataTypeException(structuredDataType);
	}

	public virtual ConceptDescription NewConceptDescription(string id) => new(id);
	public virtual ConceptDescription CreateConceptDescription() => NewConceptDescription(GetNewId());
	public virtual Deprecated NewDeprecated(string id) => new(id);
	public virtual Deprecated CreateDeprecated() => NewDeprecated(GetNewId());
	public virtual KeyedDescription NewKeyedDescription(string id) => new(id);
	public virtual KeyedDescription CreateKeyedDescription() => NewKeyedDescription(GetNewId());
	public virtual ShortDescription NewShortDescription(string id) => new(id);
	public virtual ShortDescription CreateShortDescription() => NewShortDescription(GetNewId());
	public virtual VirtualPackage NewVirtualPackage(string id) => new(id);
	public virtual VirtualPackage CreateVirtualPackage() => NewVirtualPackage(GetNewId());
}

[LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ConceptDescription")]
public partial class ConceptDescription : AnnotationInstanceBase
{
	private string? _conceptAlias = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ConceptDescription-conceptAlias")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? ConceptAlias { get => _conceptAlias; set => SetConceptAlias(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetConceptAlias([NotNullWhenAttribute(true)] out string? conceptAlias)
	{
		conceptAlias = _conceptAlias;
		return _conceptAlias != null;
	}

	/// <remarks>Optional Property</remarks>
        public ConceptDescription SetConceptAlias(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.ConceptDescription_conceptAlias, this, value, _conceptAlias, notificationId);
		notification.CollectOldData();
		_conceptAlias = value;
		notification.Notify();
		return this;
	}

	private string? _conceptShortDescription = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ConceptDescription-conceptShortDescription")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? ConceptShortDescription { get => _conceptShortDescription; set => SetConceptShortDescription(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetConceptShortDescription([NotNullWhenAttribute(true)] out string? conceptShortDescription)
	{
		conceptShortDescription = _conceptShortDescription;
		return _conceptShortDescription != null;
	}

	/// <remarks>Optional Property</remarks>
        public ConceptDescription SetConceptShortDescription(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.ConceptDescription_conceptShortDescription, this, value, _conceptShortDescription, notificationId);
		notification.CollectOldData();
		_conceptShortDescription = value;
		notification.Notify();
		return this;
	}

	private string? _helpUrl = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ConceptDescription-helpUrl")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? HelpUrl { get => _helpUrl; set => SetHelpUrl(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetHelpUrl([NotNullWhenAttribute(true)] out string? helpUrl)
	{
		helpUrl = _helpUrl;
		return _helpUrl != null;
	}

	/// <remarks>Optional Property</remarks>
        public ConceptDescription SetHelpUrl(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.ConceptDescription_helpUrl, this, value, _helpUrl, notificationId);
		notification.CollectOldData();
		_helpUrl = value;
		notification.Notify();
		return this;
	}

	public ConceptDescription(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => SpecificLanguage.Instance.ConceptDescription;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (SpecificLanguage.Instance.ConceptDescription_conceptAlias.EqualsIdentity(feature))
		{
			result = ConceptAlias;
			return true;
		}

		if (SpecificLanguage.Instance.ConceptDescription_conceptShortDescription.EqualsIdentity(feature))
		{
			result = ConceptShortDescription;
			return true;
		}

		if (SpecificLanguage.Instance.ConceptDescription_helpUrl.EqualsIdentity(feature))
		{
			result = HelpUrl;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (SpecificLanguage.Instance.ConceptDescription_conceptAlias.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetConceptAlias((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (SpecificLanguage.Instance.ConceptDescription_conceptShortDescription.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetConceptShortDescription((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (SpecificLanguage.Instance.ConceptDescription_helpUrl.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetHelpUrl((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetConceptAlias(out _))
			result.Add(SpecificLanguage.Instance.ConceptDescription_conceptAlias);
		if (TryGetConceptShortDescription(out _))
			result.Add(SpecificLanguage.Instance.ConceptDescription_conceptShortDescription);
		if (TryGetHelpUrl(out _))
			result.Add(SpecificLanguage.Instance.ConceptDescription_helpUrl);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "Deprecated")]
public partial class Deprecated : AnnotationInstanceBase
{
	private string? _build = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "Deprecated-build")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? Build { get => _build; set => SetBuild(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetBuild([NotNullWhenAttribute(true)] out string? build)
	{
		build = _build;
		return _build != null;
	}

	/// <remarks>Optional Property</remarks>
        public Deprecated SetBuild(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.Deprecated_build, this, value, _build, notificationId);
		notification.CollectOldData();
		_build = value;
		notification.Notify();
		return this;
	}

	private string? _comment = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "Deprecated-comment")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? Comment { get => _comment; set => SetComment(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetComment([NotNullWhenAttribute(true)] out string? comment)
	{
		comment = _comment;
		return _comment != null;
	}

	/// <remarks>Optional Property</remarks>
        public Deprecated SetComment(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.Deprecated_comment, this, value, _comment, notificationId);
		notification.CollectOldData();
		_comment = value;
		notification.Notify();
		return this;
	}

	public Deprecated(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => SpecificLanguage.Instance.Deprecated;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (SpecificLanguage.Instance.Deprecated_build.EqualsIdentity(feature))
		{
			result = Build;
			return true;
		}

		if (SpecificLanguage.Instance.Deprecated_comment.EqualsIdentity(feature))
		{
			result = Comment;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (SpecificLanguage.Instance.Deprecated_build.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetBuild((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (SpecificLanguage.Instance.Deprecated_comment.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetComment((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetBuild(out _))
			result.Add(SpecificLanguage.Instance.Deprecated_build);
		if (TryGetComment(out _))
			result.Add(SpecificLanguage.Instance.Deprecated_comment);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "KeyedDescription")]
public partial class KeyedDescription : AnnotationInstanceBase
{
	private string? _documentation = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "KeyedDescription-documentation")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? Documentation { get => _documentation; set => SetDocumentation(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetDocumentation([NotNullWhenAttribute(true)] out string? documentation)
	{
		documentation = _documentation;
		return _documentation != null;
	}

	/// <remarks>Optional Property</remarks>
        public KeyedDescription SetDocumentation(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.KeyedDescription_documentation, this, value, _documentation, notificationId);
		notification.CollectOldData();
		_documentation = value;
		notification.Notify();
		return this;
	}

	private readonly List<IReadableNode> _seeAlso = [];
	/// <remarks>Optional Multiple Reference</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "KeyedDescription-seeAlso")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Reference, Optional = true, Multiple = true)]
	public IReadOnlyList<IReadableNode> SeeAlso { get => _seeAlso.AsReadOnly(); init => AddSeeAlso(value); }

	/// <remarks>Optional Multiple Reference</remarks>
        public bool TryGetSeeAlso([NotNullWhenAttribute(true)] out IReadOnlyList<IReadableNode> seeAlso)
	{
		seeAlso = _seeAlso;
		return _seeAlso.Count != 0;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public KeyedDescription AddSeeAlso(IEnumerable<IReadableNode> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		AssureNotNullMembers(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		ReferenceAddMultipleNotificationEmitter<IReadableNode> notification = new(SpecificLanguage.Instance.KeyedDescription_seeAlso, this, safeNodes, _seeAlso.Count, notificationId);
		notification.CollectOldData();
		_seeAlso.AddRange(safeNodes);
		notification.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public KeyedDescription InsertSeeAlso(int index, IEnumerable<IReadableNode> nodes, INotificationId? notificationId = null)
	{
		AssureInRange(index, _seeAlso);
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		AssureNotNullMembers(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		ReferenceAddMultipleNotificationEmitter<IReadableNode> notification = new(SpecificLanguage.Instance.KeyedDescription_seeAlso, this, safeNodes, index, notificationId);
		notification.CollectOldData();
		_seeAlso.InsertRange(index, safeNodes);
		notification.Notify();
		return this;
	}

	/// <remarks>Optional Multiple Reference</remarks>
        public KeyedDescription RemoveSeeAlso(IEnumerable<IReadableNode> nodes, INotificationId? notificationId = null)
	{
		var safeNodes = nodes?.ToList();
		AssureNotNull(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		AssureNotNullMembers(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
		RemoveAll(safeNodes, _seeAlso, ReferenceRemover<IReadableNode>(SpecificLanguage.Instance.KeyedDescription_seeAlso));
		return this;
	}

	public KeyedDescription(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => SpecificLanguage.Instance.KeyedDescription;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (SpecificLanguage.Instance.KeyedDescription_documentation.EqualsIdentity(feature))
		{
			result = Documentation;
			return true;
		}

		if (SpecificLanguage.Instance.KeyedDescription_seeAlso.EqualsIdentity(feature))
		{
			result = SeeAlso;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (SpecificLanguage.Instance.KeyedDescription_documentation.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetDocumentation((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		if (SpecificLanguage.Instance.KeyedDescription_seeAlso.EqualsIdentity(feature))
		{
			var safeNodes = SpecificLanguage.Instance.KeyedDescription_seeAlso.AsNodes<IReadableNode>(value).ToList();
			AssureNotNull(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
			AssureNotNullMembers(safeNodes, SpecificLanguage.Instance.KeyedDescription_seeAlso);
			ReferenceSetNotificationEmitter<IReadableNode> notification = new(SpecificLanguage.Instance.KeyedDescription_seeAlso, this, safeNodes, _seeAlso, notificationId);
			notification.CollectOldData();
			_seeAlso.Clear();
			_seeAlso.AddRange(safeNodes);
			notification.Notify();
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetDocumentation(out _))
			result.Add(SpecificLanguage.Instance.KeyedDescription_documentation);
		if (TryGetSeeAlso(out _))
			result.Add(SpecificLanguage.Instance.KeyedDescription_seeAlso);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ShortDescription")]
public partial class ShortDescription : AnnotationInstanceBase
{
	private string? _description = null;
	/// <remarks>Optional Property</remarks>
        [LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "ShortDescription-description")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = true, Multiple = false)]
	public string? Description { get => _description; set => SetDescription(value); }

	/// <remarks>Optional Property</remarks>
        public bool TryGetDescription([NotNullWhenAttribute(true)] out string? description)
	{
		description = _description;
		return _description != null;
	}

	/// <remarks>Optional Property</remarks>
        public ShortDescription SetDescription(string? value, INotificationId? notificationId = null)
	{
		PropertyNotificationEmitter notification = new(SpecificLanguage.Instance.ShortDescription_description, this, value, _description, notificationId);
		notification.CollectOldData();
		_description = value;
		notification.Notify();
		return this;
	}

	public ShortDescription(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => SpecificLanguage.Instance.ShortDescription;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (SpecificLanguage.Instance.ShortDescription_description.EqualsIdentity(feature))
		{
			result = Description;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (SpecificLanguage.Instance.ShortDescription_description.EqualsIdentity(feature))
		{
			if (value is null or string)
			{
				SetDescription((string?)value, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetDescription(out _))
			result.Add(SpecificLanguage.Instance.ShortDescription_description);
		return result;
	}
}

[LionCoreMetaPointer(Language = typeof(SpecificLanguage), Key = "VirtualPackage")]
public partial class VirtualPackage : AnnotationInstanceBase, INamedWritable
{
	private string? _name = null;
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "UnsetFeatureException">If Name has not been set</exception>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        [LionCoreMetaPointer(Language = typeof(LionWeb.Core.VersionSpecific.V2024_1.BuiltInsLanguage_2024_1), Key = "LionCore-builtins-INamed-name")]
	[LionCoreFeature(Kind = LionCoreFeatureKind.Property, Optional = false, Multiple = false)]
	public string Name { get => _name ?? throw new UnsetFeatureException(_builtIns.INamed_name); set => SetName(value); }

	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public bool TryGetName([NotNullWhenAttribute(true)] out string? name)
	{
		name = _name;
		return _name != null;
	}
/// <remarks>Required Property</remarks>
/// <exception cref="InvalidValueException">If set to null</exception>
 INamedWritable INamedWritable.SetName(string value, INotificationId? notificationId = null) => SetName(value);
	/// <remarks>Required Property</remarks>
    	/// <exception cref = "InvalidValueException">If set to null</exception>
        public VirtualPackage SetName(string value, INotificationId? notificationId = null)
	{
		AssureNotNull(value, _builtIns.INamed_name);
		PropertyNotificationEmitter notification = new(_builtIns.INamed_name, this, value, _name, notificationId);
		notification.CollectOldData();
		_name = value;
		notification.Notify();
		return this;
	}

	public VirtualPackage(string id) : base(id)
	{
	}

	/// <inheritdoc/>
        public override Annotation GetAnnotation() => SpecificLanguage.Instance.VirtualPackage;
	/// <inheritdoc/>
        protected override bool GetInternal(Feature? feature, out object? result)
	{
		if (base.GetInternal(feature, out result))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			result = Name;
			return true;
		}

		return false;
	}

	/// <inheritdoc/>
        protected override bool SetInternal(Feature? feature, object? value, INotificationId? notificationId = null)
	{
		if (base.SetInternal(feature, value, notificationId))
			return true;
		if (_builtIns.INamed_name.EqualsIdentity(feature))
		{
			if (value is string v)
			{
				SetName(v, notificationId);
				return true;
			}

			throw new InvalidValueException(feature, value);
		}

		return false;
	}

	/// <inheritdoc/>
        public override IEnumerable<Feature> CollectAllSetFeatures()
	{
		List<Feature> result = base.CollectAllSetFeatures().ToList();
		if (TryGetName(out _))
			result.Add(_builtIns.INamed_name);
		return result;
	}
}