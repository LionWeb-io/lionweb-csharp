@startuml
hide footbox

participant "Partition" as part
participant "PartitionPublisher" as partitionPublisher
participant "Forest" as forest
box internal events
    participant "ForestEventHandler" as forestEventHandler
    participant "ForestEventReplicator" as replicator
    participant "PartitionEventReplicator" as partitionReplicator
    database "Partition\nShared\nNode\nMap" as sharedNodeMap
end box
box delta #lightblue
    participant "DeltaProtocolEventReceiver" as deltaReceiver
    participant "PartitionEventHandler" as deltaHandler
    participant "LionWeb\nClient" as client
    participant "IClient\nConnector" as connector
end box

[-> part **: new()
[-> forest ++: AddPartitions(Partition)
    forest -> forestEventHandler ++: Raise(PartitionAddedEvent)
        forestEventHandler -> forestEventHandler ++: writeHandler
            forestEventHandler -> replicator ++: LocalHandler
                replicator -> replicator ++: OnLocalNewPartition()
                    replicator -> replicator ++: RegisterPartition()
                        replicator -> partitionReplicator **: new(Partition)
                        
                        replicator -> partitionReplicator++: Init()
                            partitionReplicator -> sharedNodeMap ++: RegisterNode()\nPartition
                                sharedNodeMap -> sharedNodeMap ++: TryAdd()
                                    sharedNodeMap -> sharedNodeMap ++: OnNodeAdded()
                                        sharedNodeMap -> deltaReceiver ++: OnPartitionAdded()
                                            deltaReceiver -> deltaHandler **
                                            deltaReceiver -> replicator: LookupPartition()
                                            deltaReceiver -> deltaReceiver: AddPartitionEventHandler()
                                            deltaReceiver -> deltaHandler: ReplicateFrom(partitionEventHandler)
                                        return
                                    return
                                return
                            return
                            partitionReplicator -> partitionPublisher: Subscribe()
                        return
'                        replicator -> replicator: StorePartitionInLocalPartitions()
                    return
                return
            return
            replicator -> replicator ++: forwardingHandler
                replicator -> replicator: check if eventIds contain event\n<-- true
                replicator -> client ++: SendEventToRepository()
                    client -> client ++: Send()
                        client -> client: RegisterCommand()
                        client ->> connector: Send()
                    return 
                return
            return
        return
    return
return
    parentNode -> emitter ++: RaiseEvent()
        emitter -> commander ++: CreateEventId()
            commander -> commander: create new
        return
        emitter -> commander ++: Raise()
            commander -> commander ++: writeHandler
                commander -> replicator ++: LocalHandler
                    replicator -> replicator ++: OnLocal\n  ChildAdded()
                        replicator -> sharedNodeMap: RegisterNode()\nnewChild
                    return
                return
                replicator -> replicator ++: forwardingHandler
                    replicator -> replicator ++: Filter()
                        replicator -> replicator: checkRegistered\nEventIds()\n<-- true
                    return
                    replicator -> client ++: SendPartition\n  EventToRepository()
                        client -> client ++: Send()
                            client -> client: StoreOwn\n  CommandId()
                            client ->> connector: Send()
                        return
                    return
                return 
            return
        return
    return
return

connector -> client ++: Receive(ChildAdded)
    client -> client ++: ReceiveEvent()
        client -> client: CheckEvent\n  SequenceNumber()\n  <-- true
        client -> client ++: ProcessEvent()
            client -> client: IncrementEvent\n  SequenceNumber()
            client -> client ++: CheckOwnEvent()
                client -> client: Compare\n  ParticipationId()
                client -> client: CheckOwn\n  CommandIds()
            return true
        return
        client -> client: CheckUnprocessed\n  Events()\n  <-- false
    return
return

@enduml